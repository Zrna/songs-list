{"version":3,"sources":["assets/error.svg","assets/pen.svg","assets/trash.svg","crud/initialData.js","crud/index.js","utils/regex.js","components/Input/index.jsx","components/AddSongForm/index.jsx","components/Search/index.jsx","components/EditSongForm/index.jsx","components/Song/index.jsx","components/SongsList/index.jsx","pages/HomePage/index.jsx","utils/sorting.js","App.js","index.js"],"names":["initialData","id","artist","songName","link","setData","data","localStorage","setItem","JSON","stringify","getSongs","hasOwnProperty","parse","getItem","onlySpaces","Input","isDisabled","isRequired","label","placeholder","type","value","onChange","disabled","required","AddSongForm","isModalOpen","setIsModalOpen","fetchAndSetData","useState","newArtist","setNewArtist","newSongName","setNewSongName","newSongLink","setNewSongLink","errorMsg","setErrorMsg","resetForm","classNames","modal","open","onClose","center","className","src","errorIcon","alt","onSubmit","e","preventDefault","songs","test","lastSongIdInList","Math","max","apply","map","song","newSong","updatedList","addSong","Infinity","trim","target","onClick","Search","name","EditSong","editArtist","setEditArtist","editSongName","setEditSongName","editLink","setEditLink","updatedSong","findIndex","updateSong","Song","isEditModalOpen","setIsEditModalOpen","handleSongDelete","window","confirm","filter","deleteSong","href","rel","penIcon","trashIcon","EditSongForm","SongsList","songsList","length","HomePage","setSongsList","sortByValue","setSortByValue","isAddNewModalOpen","setIsAddNewModalOpen","filteredArtist","setFilteredArtist","useEffect","filtereSongs","toLowerCase","includes","sortedSongsList","sortType","sort","a","b","property","localeCompare","sortBy","trimStart","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92f7c295.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.1059807a.svg\";","export default __webpack_public_path__ + \"static/media/pen.b783cc70.svg\";","export default __webpack_public_path__ + \"static/media/trash.88a535b3.svg\";","const initialData = [\r\n  {\r\n    id: 1,\r\n    artist: 'AC/DC',\r\n    songName: 'Fire Your Guns',\r\n    link: 'https://www.youtube.com/watch?v=Ox7UkxBVXBs',\r\n  },\r\n  {\r\n    id: 2,\r\n    artist: 'Bon Jovi',\r\n    songName: \"It's my life\",\r\n    link: 'https://www.youtube.com/watch?v=vx2u5uUu3DE',\r\n  },\r\n  {\r\n    id: 3,\r\n    artist: 'Bon Jovi',\r\n    songName: 'You Give Love A Bad Name',\r\n    link: 'https://www.youtube.com/watch?v=KrZHPOeOxQQ',\r\n  },\r\n  {\r\n    id: 4,\r\n    artist: 'Bryan Adams',\r\n    songName: \"Summer Of '69\",\r\n    link: 'https://www.youtube.com/watch?v=eFjjO_lhf9c',\r\n  },\r\n  {\r\n    id: 5,\r\n    artist: 'Elle King',\r\n    songName: 'Good Girls',\r\n    link: 'https://www.youtube.com/watch?v=lq0qbbj2c50',\r\n  },\r\n];\r\n\r\nexport default initialData;\r\n","import initialData from './initialData';\r\n\r\nexport const setData = (data = initialData) => {\r\n  localStorage.setItem('data', JSON.stringify(data));\r\n};\r\n\r\nexport const getSongs = () => {\r\n  const localStorageExists = localStorage.hasOwnProperty('data');\r\n\r\n  if (!localStorageExists) setData();\r\n\r\n  return JSON.parse(localStorage.getItem('data'));\r\n};\r\n\r\nexport const deleteSong = id => {\r\n  const songs = getSongs();\r\n  const updatedList = songs.filter(song => song.id !== id);\r\n\r\n  setData(updatedList);\r\n};\r\n\r\nexport const addSong = newSong => {\r\n  const songs = getSongs();\r\n  const updatedList = [...songs, newSong];\r\n\r\n  setData(updatedList);\r\n};\r\n\r\nexport const updateSong = updatedSong => {\r\n  const songs = getSongs();\r\n\r\n  const updatedList = [...songs];\r\n  const songIndex = songs.findIndex(song => song.id === updatedSong.id);\r\n  updatedList[songIndex] = updatedSong;\r\n\r\n  setData(updatedList);\r\n};\r\n","export const onlySpaces = /^\\s+$/;\r\n","const Input = ({\r\n  isDisabled = false,\r\n  isRequired = false,\r\n  label,\r\n  placeholder,\r\n  type = 'text',\r\n  value,\r\n  onChange,\r\n}) => {\r\n  return (\r\n    <label>\r\n      {label}:\r\n      <input\r\n        disabled={isDisabled}\r\n        placeholder={placeholder}\r\n        required={isRequired}\r\n        type={type}\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import { useState } from 'react';\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Modal } from 'react-responsive-modal';\r\n\r\nimport { errorIcon } from '../../assets';\r\nimport { addSong, getSongs } from '../../crud';\r\nimport '../../styles/_modal.scss';\r\nimport { onlySpaces } from '../../utils';\r\n\r\nimport Input from '../Input';\r\n\r\nconst AddSongForm = ({ isModalOpen, setIsModalOpen, fetchAndSetData }) => {\r\n  const [newArtist, setNewArtist] = useState('');\r\n  const [newSongName, setNewSongName] = useState('');\r\n  const [newSongLink, setNewSongLink] = useState('');\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const handleAddSong = e => {\r\n    e.preventDefault();\r\n    const songs = getSongs();\r\n\r\n    if (onlySpaces.test(newArtist) || onlySpaces.test(newSongName)) {\r\n      setErrorMsg(\"Input fields can't be empty.\");\r\n    } else {\r\n      const lastSongIdInList = Math.max.apply(\r\n        Math,\r\n        songs.map(song => song.id)\r\n      );\r\n      const newId = lastSongIdInList === -Infinity ? 1 : lastSongIdInList + 1;\r\n\r\n      const newSong = {\r\n        id: newId,\r\n        artist: newArtist.trim(),\r\n        songName: newSongName.trim(),\r\n        link: newSongLink.trim(),\r\n      };\r\n\r\n      addSong(newSong);\r\n      fetchAndSetData();\r\n      resetForm();\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setNewArtist('');\r\n    setNewSongName('');\r\n    setNewSongLink('');\r\n    setErrorMsg('');\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      classNames={{ modal: 'modal' }}\r\n      open={isModalOpen}\r\n      onClose={() => setIsModalOpen(false)}\r\n      center\r\n    >\r\n      <h2 className='title'>Add New Song</h2>\r\n      {errorMsg && (\r\n        <p className='error-message'>\r\n          <img src={errorIcon} alt='Error' /> {errorMsg}\r\n        </p>\r\n      )}\r\n      <form onSubmit={handleAddSong}>\r\n        <Input\r\n          isRequired\r\n          label='Artist'\r\n          placeholder='Artist Name'\r\n          value={newArtist}\r\n          onChange={e => setNewArtist(e.target.value)}\r\n        />\r\n        <Input\r\n          isRequired\r\n          label='Song Name'\r\n          placeholder='Song Name'\r\n          value={newSongName}\r\n          onChange={e => setNewSongName(e.target.value)}\r\n        />\r\n        <Input\r\n          isRequired\r\n          label='Link'\r\n          placeholder='Song Link'\r\n          type='url'\r\n          value={newSongLink}\r\n          onChange={e => setNewSongLink(e.target.value)}\r\n        />\r\n        <button type='submit' className='confirm'>\r\n          Confirm\r\n        </button>\r\n      </form>\r\n      <button\r\n        type='reset'\r\n        className='cancel'\r\n        onClick={() => setIsModalOpen(false)}\r\n      >\r\n        Cancel\r\n      </button>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddSongForm;\r\n","import './styles.scss';\r\n\r\nconst Search = ({ placeholder, value, onChange }) => {\r\n  return (\r\n    <input\r\n      className='search'\r\n      placeholder={placeholder}\r\n      name='searchByArtist'\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import { useState } from 'react';\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Modal } from 'react-responsive-modal';\r\n\r\nimport { errorIcon } from '../../assets';\r\nimport { updateSong } from '../../crud';\r\nimport '../../styles/_modal.scss';\r\nimport { onlySpaces } from '../../utils';\r\n\r\nimport Input from '../Input';\r\n\r\nconst EditSong = ({ isModalOpen, setIsModalOpen, song, fetchAndSetData }) => {\r\n  const { id, artist, songName, link } = song;\r\n\r\n  const [editArtist, setEditArtist] = useState(artist);\r\n  const [editSongName, setEditSongName] = useState(songName);\r\n  const [editLink, setEditLink] = useState(link);\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const handleEditSong = e => {\r\n    e.preventDefault();\r\n\r\n    if (onlySpaces.test(editArtist) || onlySpaces.test(editSongName)) {\r\n      setErrorMsg(\"Input fields can't be empty\");\r\n    } else {\r\n      const updatedSong = {\r\n        id,\r\n        artist: editArtist.trim(),\r\n        songName: editSongName.trim(),\r\n        link: editLink.trim(),\r\n      };\r\n\r\n      updateSong(updatedSong);\r\n      fetchAndSetData();\r\n      setIsModalOpen(false);\r\n      setErrorMsg('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      classNames={{ modal: 'modal' }}\r\n      open={isModalOpen}\r\n      onClose={() => setIsModalOpen(false)}\r\n      center\r\n    >\r\n      <h2 className='title'>Edit song</h2>\r\n      <h4>\r\n        {artist} - {songName}\r\n      </h4>\r\n      {errorMsg && (\r\n        <p className='error-message'>\r\n          <img src={errorIcon} alt='Error' /> {errorMsg}\r\n        </p>\r\n      )}\r\n      <form onSubmit={handleEditSong}>\r\n        <Input isDisabled label='ID' value={id} />\r\n        <Input\r\n          isRequired\r\n          label='Artist'\r\n          placeholder='Artist Name'\r\n          value={editArtist}\r\n          onChange={e => setEditArtist(e.target.value)}\r\n        />\r\n        <Input\r\n          isRequired\r\n          label='Song Name'\r\n          placeholder='Song Name'\r\n          value={editSongName}\r\n          onChange={e => setEditSongName(e.target.value)}\r\n        />\r\n        <Input\r\n          isRequired\r\n          label='Link'\r\n          placeholder='Song Link'\r\n          type='url'\r\n          value={editLink}\r\n          onChange={e => setEditLink(e.target.value)}\r\n        />\r\n        <button className='confirm' type='submit'>\r\n          Save changes\r\n        </button>\r\n      </form>\r\n      <button\r\n        type='reset'\r\n        className='cancel'\r\n        onClick={() => setIsModalOpen(false)}\r\n      >\r\n        Cancel\r\n      </button>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default EditSong;\r\n","import { useState } from 'react';\r\n\r\nimport { penIcon, trashIcon } from '../../assets';\r\nimport { deleteSong } from '../../crud';\r\nimport EditSongForm from '../EditSongForm';\r\n\r\nimport './styles.scss';\r\n\r\nconst Song = ({ song, fetchAndSetData }) => {\r\n  const { id, artist, songName, link } = song;\r\n\r\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\r\n\r\n  const handleSongDelete = id => {\r\n    const confirmDelete = window.confirm(\r\n      `Are you sure you want to delete \"${artist} - ${songName}\"?`\r\n    );\r\n\r\n    if (confirmDelete) {\r\n      deleteSong(id);\r\n      fetchAndSetData();\r\n    }\r\n\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <div className='song'>\r\n      <p className='id'>{id}</p>\r\n      <p className='artist'>{artist}</p>\r\n      <p className='song-name'>{songName}</p>\r\n      <a className='link' href={link} target='_blank' rel='noopener noreferrer'>\r\n        {link}\r\n      </a>\r\n      <div className='actions'>\r\n        <img\r\n          src={penIcon}\r\n          alt='Edit'\r\n          onClick={() => setIsEditModalOpen(true)}\r\n        />\r\n        <img\r\n          src={trashIcon}\r\n          alt='Delete'\r\n          onClick={() => handleSongDelete(id)}\r\n        />\r\n      </div>\r\n\r\n      {isEditModalOpen && (\r\n        <EditSongForm\r\n          isModalOpen={isEditModalOpen}\r\n          setIsModalOpen={setIsEditModalOpen}\r\n          song={song}\r\n          fetchAndSetData={fetchAndSetData}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Song;\r\n","import Song from '../Song';\r\n\r\nimport './styles.scss';\r\n\r\nconst SongsList = ({ songsList, fetchAndSetData }) => {\r\n  return (\r\n    <div className='songs-list'>\r\n      <div className='columns'>\r\n        <p className='id'>#</p>\r\n        <p className='artist'>Artist</p>\r\n        <p className='song-name'>Song Name</p>\r\n        <p className='link'>Link</p>\r\n      </div>\r\n\r\n      {!songsList.length ? (\r\n        <p>No data.</p>\r\n      ) : (\r\n        songsList.map(song => (\r\n          <Song key={song.id} song={song} fetchAndSetData={fetchAndSetData} />\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SongsList;\r\n","import { useState, useEffect } from 'react';\r\n\r\nimport AddSongForm from '../../components/AddSongForm';\r\nimport Search from '../../components/Search';\r\nimport SongsList from '../../components/SongsList';\r\nimport { setData, getSongs } from '../../crud';\r\nimport { sortBy, sortById } from '../../utils';\r\n\r\nimport './styles.scss';\r\n\r\nconst HomePage = () => {\r\n  const [songsList, setSongsList] = useState([]);\r\n  const [sortByValue, setSortByValue] = useState('');\r\n  const [isAddNewModalOpen, setIsAddNewModalOpen] = useState(false);\r\n  const [filteredArtist, setFilteredArtist] = useState('');\r\n\r\n  useEffect(() => fetchAndSetData(), []);\r\n\r\n  const fetchAndSetData = () => {\r\n    const songs = getSongs();\r\n    setSongsList(songs);\r\n  };\r\n\r\n  const handleSort = e => {\r\n    e.preventDefault();\r\n    const sortType = e.target.value;\r\n\r\n    let sortedSongsList;\r\n    if (sortType === 'sortById') {\r\n      sortedSongsList = sortById(songsList);\r\n    } else {\r\n      const property = sortType === 'sortBySongName' ? 'songName' : 'artist';\r\n      sortedSongsList = sortBy(songsList, property);\r\n    }\r\n\r\n    setData(sortedSongsList);\r\n    setSortByValue(sortType);\r\n    fetchAndSetData();\r\n  };\r\n\r\n  const filtereSongs = songsList.filter(({ artist }) =>\r\n    artist.toLowerCase().includes(filteredArtist.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n        <h1>Songs List</h1>\r\n        <select value={sortByValue} onChange={handleSort}>\r\n          <option value='' disabled>\r\n            Sort by\r\n          </option>\r\n          <option value='sortById'>Id</option>\r\n          <option value='sortByArtist'>Artist</option>\r\n          <option value='sortBySongName'>Song Name</option>\r\n        </select>\r\n        <span className='add-new' onClick={() => setIsAddNewModalOpen(true)}>\r\n          Add New Song\r\n        </span>\r\n      </header>\r\n      <Search\r\n        placeholder='Search the list by artist...'\r\n        value={filteredArtist}\r\n        onChange={e => setFilteredArtist(e.target.value.trimStart())}\r\n      />\r\n      <SongsList songsList={filtereSongs} fetchAndSetData={fetchAndSetData} />\r\n      {isAddNewModalOpen && (\r\n        <AddSongForm\r\n          isModalOpen={isAddNewModalOpen}\r\n          setIsModalOpen={setIsAddNewModalOpen}\r\n          songsList={songsList}\r\n          fetchAndSetData={fetchAndSetData}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","export const sortById = data => {\r\n  return data.sort((a, b) => a.id - b.id);\r\n};\r\n\r\nexport const sortBy = (data, property) => {\r\n  const sorted = data.sort((a, b) => {\r\n    return a[property].toLowerCase().localeCompare(b[property].toLowerCase());\r\n  });\r\n\r\n  return sorted;\r\n};\r\n","import HomePage from './pages/HomePage';\n\nfunction App() {\n  return <HomePage />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}